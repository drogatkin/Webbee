<echo>Welcome to Webbee component creation wizard</echo>
<expression name="comp type">
  <function name="ask">
     <parameter>Enter type of component d - for JDO, u - for web, s - for service [d]? </parameter>
     <parameter>d</parameter>
  </function>
</expression>
<expression name="comp name">
  <function name="ask">
     <parameter>Enter name of component? </parameter>
     <parameter></parameter>
  </function>
</expression>
<expression name="proj cap">
   <function name="string">
      <parameter>&project;</parameter>
      <parameter>capital</parameter>
   </function>
</expression>

<expression name="seq gen">
   <function name="calc">
     <parameter>
        <function name="read">
           <parameter>sequence.cnt</parameter>
           <parameter/>
           <parameter/>
        </function>
     </parameter>
     <parameter>+</parameter> 
     <parameter>1</parameter> 
   </function>
</expression>

   <function name="write">
      <parameter>sequence.cnt</parameter>
      <parameter variable="seq gen"/>
   </function>

<switch variable="comp type">
  <block type="case" value="d">
      <expression name="file">
         <operator name="append">
            <value>src/java/&domain;/&org;/&project;/model/</value>
            <value variable="comp name"/>
            <value>.java</value>
         </operator>
      </expression>
      <function name="write">
         <parameter variable="file"/>
         <parameter>package &domain;.&org;.&project;.model;

import java.util.Date;

import org.aldan3.annot.DBField;
import org.aldan3.annot.DataRelation;
import org.aldan3.annot.FormField;
import org.aldan3.annot.FormField.FieldType;

import com.beegman.webbee.util.SimpleCoordinator;

@DataRelation
public class </parameter>
        <parameter variable="comp name"/>
        <parameter> extends SimpleCoordinator&lt;</parameter>
        <parameter variable="proj cap"/>
        <parameter>Model&gt; {
	public </parameter>
        <parameter variable="comp name"/>
        <parameter>(</parameter>
        <parameter variable="proj cap"/>
        <parameter>Model m) {
		super(m);
	}

	@DBField(key = true, auto = 1)
	@FormField(presentType = FieldType.Hidden)
	public long id;

	@DBField(size = 500)
	@FormField()
	public String name;

	@DBField(size = 4000)
	@FormField(presentSize = 68, presentRows = 6)
	public String description;

	@DBField
	public Date end_date;

}
         </parameter>
      </function>
  </block>
  <block type="case" value="u">
     <expression name="block type">
       <function name="ask">
          <parameter>Enter UX block type f - Form, t - Tabular, q - SQLTabular, l - Sign in, p - Portal [f]? </parameter>
          <parameter>f</parameter>
       </function>
     </expression>
     <expression name="JDO name">
       <function name="ask">
          <parameter>Enter based on JDO name if any [DataObject]? </parameter>
          <parameter>DataObject</parameter>
       </function>
     </expression>
      <expression name="name cap">
         <function name="string">
           <parameter variable="comp name"/>
           <parameter>capital</parameter>
         </function>
      </expression>
      <expression name="file">
         <operator name="append">
            <value>src/res/text/</value>
            <value variable="comp name"/>
            <value>.properties</value>
         </operator>
      </expression>
      <function name="write">
         <parameter variable="file"/>
         <parameter># put localized labels here
title=</parameter>
         <parameter variable="name cap"/>
         <parameter>
name=Name
description=Description</parameter>
      </function>

      <expression name="file">
         <operator name="append">
            <value>src/res/text/navigationtabs.properties</value>
         </operator>
      </expression>
      <function name="writea">
          <parameter variable="file"/>
          <parameter>menu_item-</parameter>
          <parameter variable="seq gen"/>
          <parameter>=</parameter>
          <parameter variable="name cap"/>
          <parameter>?id=,</parameter>
          <parameter variable="name cap"/>
          <parameter>,</parameter> 
          <parameter variable="name cap"/>
          <parameter>
</parameter>
      </function>
      <expression name="file">
         <operator name="append">
            <value>src/res/view/</value>
            <value variable="comp name"/>
            <value>.html</value>
         </operator>
      </expression>
      <expression name="file java">
         <operator name="append">
            <value>src/java/&domain;/&org;/&project;/ux/</value>
            <value variable="name cap"/>
            <value>.java</value>
         </operator>
      </expression>
      <switch variable="block type">
         <block type="case" value="f">
             <function name="write">
                 <parameter variable="file java"/>
                 <parameter>package &domain;.&org;.&project;.ux;

import org.aldan3.model.ProcessException;
import org.aldan3.data.DODelegator;
import com.beegman.webbee.block.Form;
import &domain;.&org;.&project;.model.</parameter>
                 <parameter variable="proj cap"/>
                 <parameter>Model;
import &domain;.&org;.&project;.model.</parameter>
                 <parameter variable="JDO name"/>
                 <parameter>;

public class </parameter>
                 <parameter variable="name cap"/>
                 <parameter> extends Form&lt;</parameter>
                 <parameter variable="JDO name"/>
                 <parameter>, </parameter> 
                 <parameter variable="proj cap"/>
                 <parameter>Model&gt; {

	@Override
	protected </parameter>
                 <parameter variable="JDO name"/>
                 <parameter> getFormModel() {
		return new </parameter>
                 <parameter variable="JDO name"/>
                 <parameter>(getAppModel());
	}

	@Override
	protected void loadModel(</parameter>
                 <parameter variable="JDO name"/>
                 <parameter> jdo) {
		try {
			getAppModel().getDOService().getObjectLike(new DODelegator&lt;</parameter>
                 <parameter variable="JDO name"/>
                 <parameter>&gt;(jdo, null, "", "id"));
		} catch (ProcessException e) {
			log("", e);
		}
	}

	@Override
	protected Object storeModel(</parameter>
                 <parameter variable="JDO name"/>
                 <parameter> jdo) {
		DODelegator&lt;</parameter>
                 <parameter variable="JDO name"/>
                 <parameter>&gt; djdo = jdo.id &lt;= 0?new DODelegator&lt;&gt;(jdo, null, "id", "id"):new DODelegator&lt;&gt;(jdo, null, "", "");
		try {
			getAppModel().getDOService().addObject(djdo, "id", jdo.id &lt;= 0 ? null : djdo);
			log("c/u %d", null, jdo.id);
			navigation = "."; // TODO set target page after successful operation
		} catch (ProcessException e) {
			log("", e);
			return e;
		}
		return null;
	}

}</parameter>
            </function>
            <function name="write">
                <parameter variable="file"/>
                <parameter>&lt;div class="form_header">@label.title@&lt;/div&gt;

&lt;form name="</parameter>
               <parameter variable="name cap"/>
               <parameter>" method="POST"&gt;
&lt;div&gt;&lt;div&gt;@label.name@&lt;/div&gt;@.ui.field*(name,java.lang.Object^@model@)*@&lt;/div&gt;
&lt;div&gt;&lt;div&gt;@label.description@&lt;/div&gt;@.ui.field*(description,java.lang.Object^@model@)*@&lt;/div&gt;

&lt;hr&gt; 
@.ui.field*(id,java.lang.Object^@model@)*@
&lt;input type="submit" name="submit" value="@commonlabels.submit@"&gt;
&lt;/form&gt;</parameter>
            </function>
         </block>
         <block type="case" value="q">
             <expression name="sql">
                <function name="ask">
                   <parameter>Enter SQL query of tabular result [select id, name, description from ..]? </parameter>
                   <parameter>select id, name, description from ...</parameter>
                </function>
             </expression>  
             <function name="write">
                 <parameter variable="file java"/>
                 <parameter>package &domain;.&org;.&project;.ux;

import org.aldan3.model.ProcessException;
import org.aldan3.data.DODelegator;
import org.aldan3.model.DataObject;
import org.aldan3.annot.DataRelation;
import com.beegman.webbee.block.SqlTabular;

import &domain;.&org;.&project;.model.</parameter>
                 <parameter variable="proj cap"/>
                  <parameter>Model;
@DataRelation(query="</parameter>
                  <parameter variable="sql"/>
                   <parameter>")
public class </parameter>
                  <parameter variable="name cap"/>
                  <parameter> extends SqlTabular&lt;</parameter>
                  <parameter variable="JDO name"/>
                  <parameter>,</parameter>
                  <parameter variable="proj cap"/>
                  <parameter>Model&gt; {
}
</parameter>  
           </function>
           <expression name="columns">
              <function name="region">
                 <parameter variable="sql"/>
                 <parameter>select\s+(\w+[,\s*\w+]*)\s+from.*</parameter>
              </function>
           </expression>
           <expression name="columns">
              <function name="element">
                 <parameter variable="columns"/>
                 <parameter value="0"/>
              </function>
           </expression>
           <expression name="tablr templ">
              <operator name="append">
                <value> &lt;div class="form_header">@label.title@&lt;/div&gt;

&lt;table&gt;&lt;tr&gt;</value>
               </operator>
           </expression>
           <for variable="colm" in="columns" separator=",">
               <expression name="low colm">
                  <function name="string">
                     <parameter variable="colm"/>
                     <parameter>trim</parameter>
                  </function>
               </expression>
               <expression name="low colm">
                  <function name="string">
                     <parameter variable="low colm"/>
                     <parameter>lower</parameter>
                  </function>
               </expression>
               <expression name="tablr templ">
                  <operator name="append">
                     <value variable="tablr templ"/>
                     <value>&lt;th&gt;@label.</value>
                     <value variable="low colm"/>
                     <value>@&lt;/th&gt;
</value>
                  </operator>
               </expression>
           </for>
           <expression name="tablr templ">
              <operator name="append">
                 <value variable="tablr templ"/>
                 <value>&lt;/tr&gt;
     @model(&lt;tr&gt;
</value>
              </operator>
           </expression>
           <for variable="colm" in="columns" separator=",">
               <expression name="upc colm">
                  <function name="string">
                     <parameter variable="colm"/>
                     <parameter>trim</parameter>
                  </function>
               </expression>
               <!--  set upper conversion as DB specific -->
               <expression name="upc colm">
                  <function name="string">
                     <parameter variable="upc colm"/>
                     <parameter>upper</parameter>
                  </function>
               </expression>
               <expression name="tablr templ">
                 <operator name="append">
                    <value variable="tablr templ"/>
                    <value>&lt;td&gt;@element.get*(</value>
                    <value variable="upc colm"/>
                    <value>)*@&lt;/td&gt;
</value>
                  </operator>
               </expression>
           </for>
           <expression name="tablr templ">
              <operator name="append">
                 <value variable="tablr templ"/>
                 <value>&lt;/tr&gt;)@
    &lt;/table&gt;
</value>
              </operator>
           </expression>
           <function name="write">
                <parameter variable="file"/>
                <parameter variable="tablr templ"></parameter>
           </function>
        </block>
        <block type="case" value="p">
        </block>
        <block type="case" value="l">
            <expression name="ajax login">
                <function name="ask">
                    <parameter>Is it a dedicated login screen [n]?</parameter>
                    <parameter>n</parameter>
                </function>
            </expression>
            <function name="write">
                 <parameter variable="file java"/>
                 <parameter>package &domain;.&org;.&project;.ux;

import org.aldan3.model.ProcessException;
import javax.servlet.http.HttpSession;

import com.beegman.webbee.block.Signon;
import com.beegman.webbee.model.Auth;
import &domain;.&org;.&project;.model.</parameter>
                 <parameter variable="proj cap"/>
                 <parameter>Model;
public class </parameter>
                 <parameter variable ="name cap"></parameter>
                 <parameter> extends Signon&lt;</parameter>
                 <parameter variable="proj cap"/>
                 <parameter>Model&gt; {
	@Override
	protected boolean initSession(Auth auth) {
		boolean result = super.initSession(auth);
		if (result) {
			HttpSession session = req.getSession(false);
			if (session != null) {
			// TODO deploy in session required auth attribute
				//session.setAttribute("stationary", auth.get(auth.getFullUserNameFieldName()));
				//session.setAttribute("email", auth.get("mail"));
			}
		}
		return result;
	}
}</parameter>
           </function>  
        </block>
      </switch>
  </block> 
  <block type="case" value="s">
     <expression name="serv type">
       <function name="ask">
          <parameter>Enter base service type m - mailer, c - CRON [m]? </parameter>
          <parameter>m</parameter>
       </function>
     </expression>
     <expression name="file java">
         <operator name="append">
            <value>src/java/&domain;/&org;/&project;/serv/</value>
            <value variable="comp name"/>
            <value>.java</value>
         </operator>
      </expression>
     <switch variable="serv type">
         <block type="case" value="m">
             <expression name="JDO name">
                <function name="ask">
                   <parameter>Enter mail model object name[DataObject]? </parameter>
                    <parameter>DataObject</parameter>
                </function>
             </expression>
             <expression name="name lower">
                 <function name="string">
                     <parameter variable ="comp name"/>
                     <parameter>lower</parameter>
                 </function>
             </expression>
             <function name="write">
                 <parameter variable="file java"/>
                 <parameter>///// Webbee (C) D Rogatkin   ////////////
//// TODO modify the file for required functionality
/*  Do not forget to activate the service in model class as below
     void initServices() {
         ...
         register(new </parameter>
                  <parameter variable ="comp name"></parameter>
                  <parameter>(this));
         ...
     }    
     
*/                     
package &domain;.&org;.&project;.serv;
import java.util.Collection;
import org.aldan3.model.DataObject;
import org.aldan3.model.ProcessException;
import com.beegman.webbee.util.Mailer;
import &domain;.&org;.&project;.model.*;
import &domain;.&org;.&project;.model.</parameter>
                 <parameter variable="proj cap"/>
                 <parameter>Model;
public class </parameter>
                 <parameter variable ="comp name"></parameter>
                 <parameter> extends Mailer&lt;</parameter>
                 <parameter variable="JDO name"/>
                 <parameter>, </parameter>
                 <parameter variable="proj cap"/>
                 <parameter>Model&gt; {
    public </parameter>
                 <parameter variable ="comp name"></parameter>
                 <parameter>(</parameter>
                 <parameter variable="proj cap"/>
                 <parameter>Model model) {
         super(model);
    }
                     
    @Override                 
    protected Collection&lt;</parameter>
                 <parameter variable="JDO name"/>
                 <parameter>&gt; getMailingList() {
        // TODO retrieve a mailing list here
		return null;
	}
	
	@Override
	protected String getRichView() {
		return "eml/</parameter>
		         <parameter variable="name lower"/>
		         <parameter>.html";
	}

	@Override
	protected String getPlainView() {
		return "eml/</parameter>
		         <parameter variable="name lower"/>
		         <parameter>.txt";
	}   
	
	@Override
	protected String getSubject(</parameter>
	             <parameter variable="JDO name"/>
                 <parameter> mo) {
         // TODO return value from e-mail model object, for example mo.subject            
		return null;
	}

	@Override
	protected String getTo(</parameter>
	             <parameter variable="JDO name"/>
                 <parameter> mo) {
        // TODO return value from e-mail model object, for example mo.mail
		return null;
	}

    @Override
	protected String getCc(</parameter>
	             <parameter variable="JDO name"/>
                 <parameter> mo) {
        // TODO return value from e-mail model object, for example mo.cc
		return null;
	}

    @Override
	protected String getFrom(</parameter>
	             <parameter variable="JDO name"/>
                 <parameter> mo) {
        // TODO return value from e-mail model object or just some other place
		return null;
	}
	 
}</parameter>
            </function>	
         </block>
         <block type="case" value="c">
             
         </block>
         </switch>
  </block>
</switch>
